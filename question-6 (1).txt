a)
import threading

class FibonacciThread(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
        # Calculate Fibonacci series from 1 to 10000
        a, b = 0, 1
        print("Fibonacci Series:")
        print(a)
        while b <= 10000:
            print(b)
            a, b = b, a + b

class SquareThread(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
        # Calculate square numbers from 1 to 10000
        print("Square Numbers:")
        for num in range(1, 10001):
            print(num * num)

class CubeThread(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
        # Calculate cube numbers from 1 to 10000
        print("Cube Numbers:")
        for num in range(1, 10001):
            print(num * num * num)

# Create thread instances
fib_thread = FibonacciThread()
square_thread = SquareThread()
cube_thread = CubeThread()

# Start the threads
fib_thread.start()
square_thread.start()
cube_thread.start()

# Wait for all threads to complete
fib_thread.join()
square_thread.join()
cube_thread.join()

b)
import threading

class FibonacciThread(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
        # Calculate Fibonacci series from 1 to 10000
        a, b = 0, 1
        print("Fibonacci Series:")
        print(a)
        while b <= 10000:
            print(b)
            a, b = b, a + b

class SquareThread(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
        # Calculate square numbers from 1 to 10000
        print("Square Numbers:")
        for num in range(1, 10001):
            print(num * num)

class CubeThread(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
        # Calculate cube numbers from 1 to 10000
        print("Cube Numbers:")
        for num in range(1, 10001):
            print(num * num * num)

# Create thread instances
fib_thread = FibonacciThread()
square_thread = SquareThread()
cube_thread = CubeThread()

# Start the threads
fib_thread.start()
square_thread.start()
cube_thread.start()

# Wait for all threads to complete
fib_thread.join()
square_thread.join()
cube_thread.join()

c)
import threading

class FibonacciThread(threading.Thread):
    def run(self):
        fib_list = [0, 1]
        while len(fib_list) < 10000:
            next_fib = fib_list[-1] + fib_list[-2]
            fib_list.append(next_fib)
        print("Fibonacci series:", fib_list)

class SquareThread(threading.Thread):
    def run(self):
        square_list = [i**2 for i in range(1, 10001)]
        print("Square numbers:", square_list)

class CubeThread(threading.Thread):
    def run(self):
        cube_list = [i**3 for i in range(1, 10001)]
        print("Cube numbers:", cube_list)

# Create instances of the threads
fib_thread = FibonacciThread()
square_thread = SquareThread()
cube_thread = CubeThread()

# Start the threads
fib_thread.start()
square_thread.start()
cube_thread.start()

# Wait for all threads to finish
fib_thread.join()
square_thread.join()
cube_thread.join()

print("All threads finished.")



